# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  notes(
    where: NoteWhereInput! = {}
    orderBy: [NoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
  character(
    where: CharacterWhereInput! = {}
    orderBy: [CharacterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Character!]
  characterCount(where: CharacterWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  notes: NoteManyRelationFilter
  character: CharacterManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NoteManyRelationFilter {
  every: NoteWhereInput
  some: NoteWhereInput
  none: NoteWhereInput
}

input CharacterManyRelationFilter {
  every: CharacterWhereInput
  some: CharacterWhereInput
  none: CharacterWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  notes: NoteRelateToManyForUpdateInput
  character: CharacterRelateToManyForUpdateInput
}

input NoteRelateToManyForUpdateInput {
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input CharacterRelateToManyForUpdateInput {
  disconnect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  create: [CharacterCreateInput!]
  connect: [CharacterWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  notes: NoteRelateToManyForCreateInput
  character: CharacterRelateToManyForCreateInput
}

input NoteRelateToManyForCreateInput {
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input CharacterRelateToManyForCreateInput {
  create: [CharacterCreateInput!]
  connect: [CharacterWhereUniqueInput!]
}

type Note {
  id: ID!
  title: String
  status: String
  content: Note_content_Document
  publishDate: DateTime
  author: User
  description: Note_description_Document
  characters(
    where: CharacterWhereInput! = {}
    orderBy: [CharacterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Character!]
  charactersCount(where: CharacterWhereInput! = {}): Int
  factions(
    where: FactionWhereInput! = {}
    orderBy: [FactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faction!]
  factionsCount(where: FactionWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  clocks(
    where: ClockWhereInput! = {}
    orderBy: [ClockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Clock!]
  clocksCount(where: ClockWhereInput! = {}): Int
}

type Note_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Note_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NoteWhereUniqueInput {
  id: ID
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  characters: CharacterManyRelationFilter
  factions: FactionManyRelationFilter
  locations: LocationManyRelationFilter
  tags: TagManyRelationFilter
  clocks: ClockManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input FactionManyRelationFilter {
  every: FactionWhereInput
  some: FactionWhereInput
  none: FactionWhereInput
}

input LocationManyRelationFilter {
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ClockManyRelationFilter {
  every: ClockWhereInput
  some: ClockWhereInput
  none: ClockWhereInput
}

input NoteOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input NoteUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  description: JSON
  characters: CharacterRelateToManyForUpdateInput
  factions: FactionRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  clocks: ClockRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input FactionRelateToManyForUpdateInput {
  disconnect: [FactionWhereUniqueInput!]
  set: [FactionWhereUniqueInput!]
  create: [FactionCreateInput!]
  connect: [FactionWhereUniqueInput!]
}

input LocationRelateToManyForUpdateInput {
  disconnect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ClockRelateToManyForUpdateInput {
  disconnect: [ClockWhereUniqueInput!]
  set: [ClockWhereUniqueInput!]
  create: [ClockCreateInput!]
  connect: [ClockWhereUniqueInput!]
}

input NoteUpdateArgs {
  where: NoteWhereUniqueInput!
  data: NoteUpdateInput!
}

input NoteCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  description: JSON
  characters: CharacterRelateToManyForCreateInput
  factions: FactionRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  clocks: ClockRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input FactionRelateToManyForCreateInput {
  create: [FactionCreateInput!]
  connect: [FactionWhereUniqueInput!]
}

input LocationRelateToManyForCreateInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ClockRelateToManyForCreateInput {
  create: [ClockCreateInput!]
  connect: [ClockWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  description: Tag_description_Document
  characters(
    where: CharacterWhereInput! = {}
    orderBy: [CharacterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Character!]
  charactersCount(where: CharacterWhereInput! = {}): Int
  factions(
    where: FactionWhereInput! = {}
    orderBy: [FactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faction!]
  factionsCount(where: FactionWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  clocks(
    where: ClockWhereInput! = {}
    orderBy: [ClockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Clock!]
  clocksCount(where: ClockWhereInput! = {}): Int
  notes(
    where: NoteWhereInput! = {}
    orderBy: [NoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
}

type Tag_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  characters: CharacterManyRelationFilter
  factions: FactionManyRelationFilter
  locations: LocationManyRelationFilter
  clocks: ClockManyRelationFilter
  notes: NoteManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  description: JSON
  characters: CharacterRelateToManyForUpdateInput
  factions: FactionRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  clocks: ClockRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  description: JSON
  characters: CharacterRelateToManyForCreateInput
  factions: FactionRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  clocks: ClockRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
}

type Character {
  id: ID!
  name: String
  avatar: ImageFieldOutput
  player: User
  description: Character_description_Document
  factions(
    where: FactionWhereInput! = {}
    orderBy: [FactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faction!]
  factionsCount(where: FactionWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  clocks(
    where: ClockWhereInput! = {}
    orderBy: [ClockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Clock!]
  clocksCount(where: ClockWhereInput! = {}): Int
  notes(
    where: NoteWhereInput! = {}
    orderBy: [NoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Character_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CharacterWhereUniqueInput {
  id: ID
}

input CharacterWhereInput {
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
  id: IDFilter
  name: StringFilter
  player: UserWhereInput
  factions: FactionManyRelationFilter
  locations: LocationManyRelationFilter
  tags: TagManyRelationFilter
  clocks: ClockManyRelationFilter
  notes: NoteManyRelationFilter
}

input CharacterOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CharacterUpdateInput {
  name: String
  avatar: ImageFieldInput
  player: UserRelateToOneForUpdateInput
  description: JSON
  factions: FactionRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  clocks: ClockRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CharacterUpdateArgs {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateInput!
}

input CharacterCreateInput {
  name: String
  avatar: ImageFieldInput
  player: UserRelateToOneForCreateInput
  description: JSON
  factions: FactionRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  clocks: ClockRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
}

type Faction {
  id: ID!
  name: String
  description: Faction_description_Document
  characters(
    where: CharacterWhereInput! = {}
    orderBy: [CharacterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Character!]
  charactersCount(where: CharacterWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  clocks(
    where: ClockWhereInput! = {}
    orderBy: [ClockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Clock!]
  clocksCount(where: ClockWhereInput! = {}): Int
  notes(
    where: NoteWhereInput! = {}
    orderBy: [NoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
}

type Faction_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FactionWhereUniqueInput {
  id: ID
}

input FactionWhereInput {
  AND: [FactionWhereInput!]
  OR: [FactionWhereInput!]
  NOT: [FactionWhereInput!]
  id: IDFilter
  name: StringFilter
  characters: CharacterManyRelationFilter
  locations: LocationManyRelationFilter
  tags: TagManyRelationFilter
  clocks: ClockManyRelationFilter
  notes: NoteManyRelationFilter
}

input FactionOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input FactionUpdateInput {
  name: String
  description: JSON
  characters: CharacterRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  clocks: ClockRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
}

input FactionUpdateArgs {
  where: FactionWhereUniqueInput!
  data: FactionUpdateInput!
}

input FactionCreateInput {
  name: String
  description: JSON
  characters: CharacterRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  clocks: ClockRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
}

type Location {
  id: ID!
  name: String
  picture: ImageFieldOutput
  description: Location_description_Document
  characters(
    where: CharacterWhereInput! = {}
    orderBy: [CharacterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Character!]
  charactersCount(where: CharacterWhereInput! = {}): Int
  factions(
    where: FactionWhereInput! = {}
    orderBy: [FactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faction!]
  factionsCount(where: FactionWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  clocks(
    where: ClockWhereInput! = {}
    orderBy: [ClockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Clock!]
  clocksCount(where: ClockWhereInput! = {}): Int
  notes(
    where: NoteWhereInput! = {}
    orderBy: [NoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
}

type Location_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input LocationWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  characters: CharacterManyRelationFilter
  factions: FactionManyRelationFilter
  tags: TagManyRelationFilter
  clocks: ClockManyRelationFilter
  notes: NoteManyRelationFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input LocationUpdateInput {
  name: String
  picture: ImageFieldInput
  description: JSON
  characters: CharacterRelateToManyForUpdateInput
  factions: FactionRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  clocks: ClockRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  picture: ImageFieldInput
  description: JSON
  characters: CharacterRelateToManyForCreateInput
  factions: FactionRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  clocks: ClockRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
}

type Clock {
  id: ID!
  name: String
  piecesToFinish: Int
  piecesFilled: Int
  description: Clock_description_Document
  characters(
    where: CharacterWhereInput! = {}
    orderBy: [CharacterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Character!]
  charactersCount(where: CharacterWhereInput! = {}): Int
  factions(
    where: FactionWhereInput! = {}
    orderBy: [FactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faction!]
  factionsCount(where: FactionWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  notes(
    where: NoteWhereInput! = {}
    orderBy: [NoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
}

type Clock_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ClockWhereUniqueInput {
  id: ID
}

input ClockWhereInput {
  AND: [ClockWhereInput!]
  OR: [ClockWhereInput!]
  NOT: [ClockWhereInput!]
  id: IDFilter
  name: StringFilter
  piecesToFinish: IntNullableFilter
  piecesFilled: IntNullableFilter
  characters: CharacterManyRelationFilter
  factions: FactionManyRelationFilter
  locations: LocationManyRelationFilter
  tags: TagManyRelationFilter
  notes: NoteManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ClockOrderByInput {
  id: OrderDirection
  name: OrderDirection
  piecesToFinish: OrderDirection
  piecesFilled: OrderDirection
}

input ClockUpdateInput {
  name: String
  piecesToFinish: Int
  piecesFilled: Int
  description: JSON
  characters: CharacterRelateToManyForUpdateInput
  factions: FactionRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
}

input ClockUpdateArgs {
  where: ClockWhereUniqueInput!
  data: ClockUpdateInput!
}

input ClockCreateInput {
  name: String
  piecesToFinish: Int
  piecesFilled: Int
  description: JSON
  characters: CharacterRelateToManyForCreateInput
  factions: FactionRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createNote(data: NoteCreateInput!): Note
  createNotes(data: [NoteCreateInput!]!): [Note]
  updateNote(where: NoteWhereUniqueInput!, data: NoteUpdateInput!): Note
  updateNotes(data: [NoteUpdateArgs!]!): [Note]
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotes(where: [NoteWhereUniqueInput!]!): [Note]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCharacter(data: CharacterCreateInput!): Character
  createCharacters(data: [CharacterCreateInput!]!): [Character]
  updateCharacter(
    where: CharacterWhereUniqueInput!
    data: CharacterUpdateInput!
  ): Character
  updateCharacters(data: [CharacterUpdateArgs!]!): [Character]
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteCharacters(where: [CharacterWhereUniqueInput!]!): [Character]
  createFaction(data: FactionCreateInput!): Faction
  createFactions(data: [FactionCreateInput!]!): [Faction]
  updateFaction(
    where: FactionWhereUniqueInput!
    data: FactionUpdateInput!
  ): Faction
  updateFactions(data: [FactionUpdateArgs!]!): [Faction]
  deleteFaction(where: FactionWhereUniqueInput!): Faction
  deleteFactions(where: [FactionWhereUniqueInput!]!): [Faction]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(
    where: LocationWhereUniqueInput!
    data: LocationUpdateInput!
  ): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createClock(data: ClockCreateInput!): Clock
  createClocks(data: [ClockCreateInput!]!): [Clock]
  updateClock(where: ClockWhereUniqueInput!, data: ClockUpdateInput!): Clock
  updateClocks(data: [ClockUpdateArgs!]!): [Clock]
  deleteClock(where: ClockWhereUniqueInput!): Clock
  deleteClocks(where: [ClockWhereUniqueInput!]!): [Clock]
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  notes(
    where: NoteWhereInput! = {}
    orderBy: [NoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Note!]
  note(where: NoteWhereUniqueInput!): Note
  notesCount(where: NoteWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  characters(
    where: CharacterWhereInput! = {}
    orderBy: [CharacterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Character!]
  character(where: CharacterWhereUniqueInput!): Character
  charactersCount(where: CharacterWhereInput! = {}): Int
  factions(
    where: FactionWhereInput! = {}
    orderBy: [FactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faction!]
  faction(where: FactionWhereUniqueInput!): Faction
  factionsCount(where: FactionWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  location(where: LocationWhereUniqueInput!): Location
  locationsCount(where: LocationWhereInput! = {}): Int
  clocks(
    where: ClockWhereInput! = {}
    orderBy: [ClockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Clock!]
  clock(where: ClockWhereUniqueInput!): Clock
  clocksCount(where: ClockWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
